#!/bin/bash

##############################################
# Script to run the test plan using jmeter
#
# Runs will be grouped according to $1 so they
# can be compared easily. The run description
# will be useful to identify them.
#
# Usage: cd /path/to/moodle-performance-comparison && ./runtestplan.sh {run_group_name} {run_description}
#
# Arguments:
# * $1 => The run group name, there will be comparision graphs by this group name
# * $2 => The run description, useful to identify the changes between runs.
#
##############################################

set -e

# Dependencies.
. ./lib/lib.sh

# We need to know the test plan groupswhich test plan to run and a run group name.
if [ -z "$2" ]; then
    echo "Usage: `basename $0` {run_group} {run_description}"
    exit 1
fi

# Load properties.
load_properties

# We need to know which amount of data was generated to inform about it.
. ./testplandata/generateddata.properties
includeexitcode=$?
if [ "$includeexitcode" -ne "0" ] ; then
    echo "Error: Ensure you executed ./datagenerator.sh {small|medium|big} before running the test"
    exit $includeexitcode
fi

# It should not be necessary as it was generated by datagenerator.sh, just in case...
check_size_value $size

# Run values according to the generated data.
users=$(eval "echo \$$(echo $size'_users')")
loops=$(eval "echo \$$(echo $size'_loops')")
rampup=$(eval "echo \$$(echo $size'_rampup')")

# Uses the test plan specified in the CLI call.
logfile=logs/jmeter_$size.`date '+%Y%m%d_%H%M'`.log
testplan='testplandata/testplan_'$size'_'$branch'.jmx'
usersfile='users_'$size'_'$branch'.csv'

# Run it baby! (without GUI).
jmeterbin=$jmeter_path/bin/jmeter
$jmeterbin -n -j "$logfile" -t "$testplan" -Jhost=$host -Jusers=$users -Jloops=$loops -Jrampup=$rampup -Jusersfile="$usersfile" -Jbranch="$branch" -Jgroup="$1" -Jdesc="$2" -Jsitepath="$sitepath"
jmeterexitcode=$?
if [ "$jmeterexitcode" -ne "0" ] ; then
    echo "Error: Jmeter can not run, ensure that:"
    echo "* You specified the correct jmeter base path in config.properties"
    echo "* You provide correct arguments to the script"
    exit $jmeterexitcode
fi

echo ""
echo "Test plan completed successfully"
